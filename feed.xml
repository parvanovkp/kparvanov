<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en, bg, de"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://www.kparvanov.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://www.kparvanov.com/" rel="alternate" type="text/html" hreflang="en, bg, de"/><updated>2023-12-07T07:05:37+00:00</updated><id>https://www.kparvanov.com/feed.xml</id><title type="html">blank</title><subtitle>My name is Kal Parvanov and I am a third year PhD student at the University of Colorado Boulder. This is my personal website where I plan to share my projects, publications, and blog posts. </subtitle><entry><title type="html">The Damped Unforced Pendulum Problem</title><link href="https://www.kparvanov.com/blog/2023/distill/" rel="alternate" type="text/html" title="The Damped Unforced Pendulum Problem"/><published>2023-11-30T00:00:00+00:00</published><updated>2023-11-30T00:00:00+00:00</updated><id>https://www.kparvanov.com/blog/2023/distill</id><content type="html" xml:base="https://www.kparvanov.com/blog/2023/distill/"><![CDATA[<h2 id="introduction-understanding-the-damped-pendulum-problem">Introduction: Understanding the Damped Pendulum Problem</h2> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/foucault-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/foucault-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/foucault-1400.webp"/> <img src="/assets/img/NN_Final_Project/foucault.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Foucault's pendulum at the Pantheon in Paris, France. Photo credit: <a href="https://www.flickr.com/photos/msk13/4818027399/">Misko/Flickr</a> </div> <p>The pendulum problem is a fundamental problem in classical mechanics and as such is often one of the topics taught to first year physics students in college. The earliest well-known use of pendulums in modern history dates back to 1656 when the Dutch scientist Christiaan Huygens used a pendulum as a time-keeping device.<d-cite key="huygens-hist"></d-cite> This novel application of the pendulum was built upon the work of the 16th century Italian polymath Galileo Galilei, who discovered that the period<d-footnote>The time for each complete swing.</d-footnote> of the pendulum’s swing is independent of its amplitude<d-footnote>The length of the swing.</d-footnote>, and that for small enough swings it is also isochronic<d-footnote>Constant in time.</d-footnote>.<d-cite key="galileo"></d-cite> Later, in 1851, the French physicist Léon Foucault developed a pendulum experiment<d-footnote>A 28kg mass attached to a 68m long thin metal wire was suspended from the half-dome ceiling of the Pantheon in Paris and tracked over a long period of time to show that the pendulum's plane of oscillation rotates.</d-footnote> in order to demonstrate the rotation of the Earth.<d-cite key="foucault"></d-cite> From helping us measure time and navigate the seas to helping us prove that the Earth rotates, the pendulum and the study of the dynamical system that describes its motion have had a enormous effect on Physics and Engineering.</p> <p>The utility of the pendulum, however, extends far beyond its historical significance. Indeed, the pendulum problem is quite important in modern science and engineering. In fact, the underlying principles driving the behaviour of the pendulum are foundational in understanding the topics of harmonic motion and vibration control. These topics are particularly important in fields such as seismology and structural engineering. For example, pendulums are key components in the design of classical seismographs where they are used to measure and record the strength and duration of earth tremors and earthquakes. Such an application is pivotal in the field of seismic monitoring as it aids in the prediction of seismic events, thereby significantly improving public safety. Furthermore, structural engineers often employ pendulum principles in the design of systems and elements that would improve a building’s seismic resilience. More specifically, tuned mass dampers are used to mitigate the vibrations in structures caused by winds and earthquakes.<d-cite key="tuned_damper"></d-cite> If left unchecked these vibrations could otherwise lead to building collapse and a large number of fatalities. The simplicity of the pendulum, juxtaposed with its complex modern-day applications, clearly demonstrates how basic physical principles can be harnessed to solve contemporary engineering challenges. Nevertheless, for such complex solutions to be feasible one needs to rely on a detailed analytical framework to derive valuable insights about the underlying principles.</p> <style>.fixed-size-image{width:350px;height:250px;object-fit:cover}</style> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/damper-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/damper-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/damper-1400.webp"/> <img src="/assets/img/NN_Final_Project/damper.jpg" class="img-fluid rounded z-depth-1 fixed-size-image" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> The tuned mass damper of Taipei 101 in Taipei City, Taiwan. Photo credit: <a href="https://www.flickr.com/photos/sk51/8342914631/in/photolist-dHeBRH-cYdM75-2jCaxyh-2hTxiPJ-2nWqcFr-9pXKsv-786x47-84fDFi-XwmqrQ-5bBakR-2mW8ZV1-7L5rCf-aALp8G-2mUxiF8-UJXh6T-bzo9qN-9iWdLQ-SrNtC8-FwwsFU-2oqdroL-dHeAk6-dHk3yj-dHk3ff-8gewme-dHeABP-4gUWrG-4W59q7-2hDjY8x-scYRu4-FUXrxo-r6tZZK-mDxm8X-5WK4MY-2nWqDNQ-2hUd5g8-pMNR8j-cxbmJy-2igoTqV-3ScBKH-cdadfE-8gew4R-2igoTBM-WRdWNJ-6ax2Es-5RofSj-6xg81v-2ijUJpf-fkY5NL-2iVKEw7-584KA">Paul Blair/Flickr</a> </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/giphy_2.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/giphy_2.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/giphy_2.gif-1400.webp"/> <img src="/assets/img/NN_Final_Project/giphy_2.gif" class="img-fluid rounded z-depth-1 fixed-size-image" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> A tuned mass damper (TMD) in action. GIF credit: <a href="https://giphy.com/gifs/Dlubal-Software-mFN5aTa9OTcc2V2cgb">Dlubal/Giphy</a> </div> </div> </div> <p>The development of pendulum motion analysis within a dynamical systems framework has been a significant leap in the understanding of the pendulum problem in realistic<d-footnote>The physical experiments of old cannot satisfy the rigor and details demanded by modern-day engineers.</d-footnote> settings. Originating from the need to model more complex and real-world scenarios, the dynamical systems approach considers the effects of external stopping forces such as air-resistance and friction<d-footnote>Often referred to as damping forces.</d-footnote> on the motion of the pendulum. Unlike the idealized simple pendulum, which swings perpetually, the damped unforced pendulum experiences a gradual decrease in its oscillation amplitude due to resistive forces, ultimately coming to a rest. This more complex model allows for an accurate analysis of the behaviors of the pendulum, without the need to conduct complicated physical experiments. Furthermore, the concept of “damping” is crucial in understanding the various real-world oscillatory systems where energy dissipation is a common occurrence. One such example is the swinging of a building during an earthquake. Here the dynamical systems perspective not only offers a more accurate representation of pendulum motion, but also reveals intricate patterns and behaviors, like the transition from regular to chaotic behavior under certain conditions. This analytical framework, thus, unlocks deeper insights into the pendulum’s dynamics, showing its utility in designing systems that mimic or counteract particular motions, and allows engineers to predict complex behaviors without having to set up costly, and sometimes even impossible physical experiments.</p> <style>.pendulum{width:750px;height:420px;object-fit:cover}</style> <div class="row mt-3 l-gutter"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/Pendulum-no-text.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/Pendulum-no-text.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/Pendulum-no-text.gif-1400.webp"/> <img src="/assets/img/NN_Final_Project/Pendulum-no-text.gif" class="img-fluid rounded pendulum" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption l-gutter" style="margin-top: -60px;"> An idealized pendulum in motion. GIF credit: <a href="https://en.m.wikipedia.org/wiki/File:Pendulum-no-text.gif">Stündle/Wikipedia</a> </div> <p>However, as the applications of pendulum principles grow increasingly complex, the corresponding dynamical systems modeling the desired behaviors become harder and harder to solve and analyze. Historically, this gave rise to the field of numerical analysis, which focused on developing various numerical schemes that are provably reliable in order to solve problems with no analytic<d-footnote>Closed-form.</d-footnote> solutions. For instance, in the realm of high-rise building design, where pendulum-like tuned mass dampers are employed to counteract wind and seismic forces, the intricate interplay of forces demands highly precise numerical solvers, which could often take days or even weeks to run. Similarly, in the field of aerospace engineering, the stabilization systems of spacecraft, which draw parallels to pendulum dynamics, require models capable of handling intricate, multi-dimensional forces.<d-cite key="navabi"></d-cite> Traditional numerical approaches, while effective for simpler systems, struggle with the computational load and precision required for these advanced applications. The need for faster, more efficient, and accurate modeling, thus, becomes apparent, hinting at the emergence of innovative approaches that can bridge these gaps.<d-cite key="lu2021"></d-cite> These evolving methods promise to offer deeper insights and lower computational costs, laying the groundwork for a new era of computational analysis in dynamics.</p> <p>As we stand on the brink of a new frontier in dynamical systems analysis, it is clear that our journey with the pendulum, from a simple timekeeping device to a complex model in engineering and physics has been nothing short of remarkable. The pendulum’s story teaches us the value of revisiting basic concepts with a fresh perspective, continually pushing the boundaries of our understanding and capabilities. In this era of rapid technological advancement, our quest to model and predict complex dynamical systems is more relevant than ever. It paves the way for innovative solutions that are not just faster and more precise, but also more accessible to a wider range of applications. This evolution in approach, subtly hinted at, but not yet fully explored, promises to revolutionize how we perceive and interact with the dynamic world around us. It faithfully embodies the very spirit of continuous discovery and improvement that drives the scientific effort.</p> <hr/> <h2 id="data-foundations-pendulum-dynamics-and-parameters">Data Foundations: Pendulum Dynamics and Parameters</h2> <p>This project is designed within the analysis framework of dynamical systems theory which attempts to model real-world time dependent systems referred to as ‘dynamical systems’. In particular the specifc model for the pendulum problem was chosen with a fine balance between realistic behavior and model complexity in mind. The two sub-sections below introduce the theoretical framework for modeling pendulum motion and explain the data generation process used to collect the data needed for training the Vanilla neural network model introduced in the next section.</p> <h3 id="the-theoretical-framework">The Theoretical Framework</h3> <p>The traditional 1D damped unforced pedulum problem is modeled by the second order homogenous constant coefficient non-linear oridinary differential equation (ODE):</p> \[\ddot{\theta}(t)+b \dot{\theta}(t)+\frac{g}{L} \sin (\theta(t))=0\] <p>where</p> <ul> <li>\(\ddot{\theta}(t)\) is the second derivative of \(\theta(t)\) with respect to time, representing the angular acceleration of the pendulum (\(rad/s^2\)).</li> <li>\(\dot{\theta}(t)\) is the first derivative of \(\theta(t)\) with respect to time, representing the angular velocity of the pendulum (\(rad/s\)).</li> <li>\(b\) is the damping coefficient, representing the effect of air resistance or other damping forces.</li> <li>\(g\) is the acceleration due to gravity.</li> <li>\(L\) is the length of the pendulum.</li> </ul> <p>Since the equation above is non-linear in nature, it does not have a closed-form solution. This, in turn, necessitates the use of numerical methods such as the those from the Runge-Kutta, Adams-Bashford and Adams-Moulton families of methods. It is important to note that throughout this article the notation,</p> \[\omega(t) = \dot{\theta}(t)\] <p>will be used for convenience and in accordance with the classical mechanics nomenclature.</p> <h3 id="data-generation">Data Generation</h3> <div class="row mt-3 l-page"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/pendulum_motion.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/pendulum_motion.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/pendulum_motion.gif-1400.webp"/> <img src="/assets/img/NN_Final_Project/pendulum_motion.gif" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption l-page"> A dynamic visualization of the IVP presented below. GIF credit: <a href="https://github.com/parvanovkp/Neural_Networks_Final_Project/blob/main/Pendulum%20Project/pendulum_motion.gif">Kal Parvanov/GitHub</a> </div> <p>An initial value problem (IVP) with parameters $b=0.5$, $g=9.81$ and $L=6$, and initial conditions $\theta(0)=\frac{\pi}{4}$ and $\omega(0)=0$ is used to generate data for the pendulum problem. The particular form of the IVP is written as</p> \[\begin{aligned} \ddot{\theta}(t)+0.5 \dot{\theta}(t)+\frac{9.81}{6} \sin (\theta(t)) &amp; =0, \\ \theta(0) &amp; =\frac{\pi}{4}, \\ \dot{\theta}(0) &amp; =0 . \end{aligned}\] <p>This form of the IVP, however, is not the standard form accepted by numerical solvers, which require a first order form. To convert the IVP to a first order form it is necessary to express it as a system of two first order ODEs with a corresponding vector of initial conditions. This can be done, by letting</p> \[\begin{aligned} \dot{\theta}(t) &amp; =\omega(t) \\ \dot{\omega}(t) &amp; =-0.5 \omega(t)-\frac{9.81}{6} \sin (\theta(t)) \end{aligned}\] <p>which then results in the linear system of first order ODEs with an initial value vector</p> \[\left[\begin{array}{c} \dot{\theta}(t) \\ \dot{\omega}(t) \end{array}\right]=\left[\begin{array}{c} \omega(t) \\ -0.5 \omega(t)-\frac{9.81}{6} \sin (\theta(t)) \end{array}\right], \quad\left[\begin{array}{c} \theta(0) \\ \omega(0) \end{array}\right]=\left[\begin{array}{l} \frac{\pi}{4} \\ 0 \end{array}\right]\] <p>The specific numerical solver used to solve the IVP above and generate the training data is the <code class="language-plaintext highlighter-rouge">solve_ivp</code> function from the Python <code class="language-plaintext highlighter-rouge">scipy</code> library. The underlying numerical method employed is the Runge-Kutta order 5 method, which is appropriate in this situation since the underlying ODE is not stiff. Below is the short code used to generate the training data for the Vanilla Neural Network.<d-footnote> Note that the Physics-Informed Neural Network does not need any training data since its training is entirely guided by its physics-informed loss function.</d-footnote> The code is used to generate 1000 solution points \(\theta_i\) and \(\omega_i\) <d-footnote>$1 \leq i \leq 1000$</d-footnote> at 1000 equispaced time points on the interval \([0,10]\).</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">scipy.integrate</span> <span class="kn">import</span> <span class="n">solve_ivp</span>

<span class="c1"># Constants
</span><span class="n">b</span> <span class="o">=</span> <span class="mf">0.5</span> <span class="c1"># damping coefficient
</span><span class="n">g</span> <span class="o">=</span> <span class="mf">9.81</span> <span class="c1"># acceleration due to gravity
</span><span class="n">L</span> <span class="o">=</span> <span class="mi">6</span> <span class="c1"># length of the pendulum
</span><span class="n">y0</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="c1"># Initial conditions
</span>
<span class="c1"># Differential Equation
</span><span class="k">def</span> <span class="nf">damped_pendulum</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="n">theta</span><span class="p">,</span> <span class="n">omega</span> <span class="o">=</span> <span class="n">y</span>
    <span class="n">dtheta_dt</span> <span class="o">=</span> <span class="n">omega</span>
    <span class="n">domega_dt</span> <span class="o">=</span> <span class="o">-</span><span class="n">b</span> <span class="o">*</span> <span class="n">omega</span> <span class="o">-</span> <span class="p">(</span><span class="n">g</span> <span class="o">/</span> <span class="n">L</span><span class="p">)</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">theta</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">dtheta_dt</span><span class="p">,</span> <span class="n">domega_dt</span><span class="p">]</span>

<span class="c1"># Generate and solve ODE
</span><span class="k">def</span> <span class="nf">generate_ode_solution</span><span class="p">(</span><span class="n">t_span</span><span class="p">,</span> <span class="n">y0</span><span class="p">,</span> <span class="n">t_eval</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">solve_ivp</span><span class="p">(</span><span class="n">damped_pendulum</span><span class="p">,</span> <span class="n">t_span</span><span class="p">,</span> <span class="n">y0</span><span class="p">,</span> <span class="n">t_eval</span><span class="o">=</span><span class="n">t_eval</span><span class="p">)</span>
</code></pre></div></div> <p>Finally, note that due to the nature of the ODE problem, there is no need for specific training, validation and test datasets. Both of the models presented in the next section will learn the IVP solution, namely \(\theta(t)\) and \(\omega(t)\), on the pre-specified domain<d-footnote>$[0,10]$</d-footnote> with an ability to predict \(\theta(t)\) and \(\omega(t)\) for any point \(t\) on that domain to a degree of accuracy comparable to that of numerical solvers. This is, in fact, due to Neural Networks’ ability to approximate functions, which is exactly what the solution to the IVP is. <d-cite key="HORNIK1991251"></d-cite></p> <hr/> <h2 id="modeling-pendulum-motion-neural-network-approaches">Modeling Pendulum Motion: Neural Network Approaches</h2> <p>This section presents two different Neural Network models that are trained to predict the values of the IVP presented in <a href="#data-generation">Data Generation</a>. The first model is a Vanilla Neural Network that uses the true \(\theta\) and \(\omega\) data obtained via the numerical solver <code class="language-plaintext highlighter-rouge">solve_ivp</code> and outputs \(\widehat{\theta}\) and \(\widehat{\omega}\). The reason for choosing the VNN model is for its function approximation properties and to have it serve as a control model for the more complicated Physics-Informed model.<d-cite key="HORNIK1991251"></d-cite> Physics-Informed Neural Networks, more commonly known as PINNs, have garnered quite a bit of interest in the scientific community since their original introduction in 2019.<d-cite key="RAISSI2019686"></d-cite> PINNs have the unique ability to incorporate the underlying physics of a problem into the Neural Network model and, as a result of this property, a PINN doesn’t need any training data. Its loss function is defined in such a way so that the physics principles of the problem define the penalty for wrong predictions. PINNs are, thus, quite promising tools for the solution of complicated differential equations where regular solvers might not work or take too long to produce results.</p> <h3 id="the-vanilla-neural-network">The Vanilla Neural Network</h3> <p>A simple neural network model, referred to as a “Vanilla Neural Network”, was selected as the control model to compare with the physics-informed neural network introduced in the next section. The VNN model consists of a simple feed-forward neural network with 1 input node for the \(t\)-values and 3 hidden layers with 32 units each, activated with a hyperbolic tangent function \(\tanh\). There are two output nodes, one for \(\widehat{\theta}\) and another for \(\widehat{\omega}\). The Loss function is custom-defined to use the sum of the \(\operatorname{MSE}\) (mean squared error) for \(\widehat{\theta}\) and \(\widehat{\omega}\) and is given by</p> \[\begin{align*} \operatorname{Loss}_{\mathrm{TOTAL}} &amp;= \operatorname{MSE}(\widehat{\theta}, \theta) + \operatorname{MSE}(\widehat{\omega}, \omega) \\ &amp;= \frac{1}{n} \sum^{n}_{i=1}(\widehat{\theta}_i - \theta_i)^2 + \frac{1}{n} \sum^{n}_{i=1}(\widehat{\omega}_i - \omega_i)^2 \\ &amp;= \frac{1}{n} \sum^{n}_{i=1}(\widehat{\theta}_i - \theta_i)^2 + (\widehat{\omega}_i - \omega_i)^2 \end{align*}\] <p>Outside of the custom defined mean-squared loss function, which is otherwise indifferent to the standard \(\operatorname{MSE}\) loss function in <code class="language-plaintext highlighter-rouge">keras</code>, the neural network architecture is identical to that of the standard FFNNs. Below is a diagram of the structure that was described above.</p> <div class="row mt-3 l-page"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/Vanilla_NN_architecture_transparent-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/Vanilla_NN_architecture_transparent-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/Vanilla_NN_architecture_transparent-1400.webp"/> <img src="/assets/img/NN_Final_Project/Vanilla_NN_architecture_transparent.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Vanilla Neural Net Architecture. Diagram credit: <a href="https://github.com/parvanovkp/Neural_Networks_Final_Project/blob/main/Vanilla_NN_architecture_transparent.png">Kal Parvanov/GitHub</a> </div> <p>The particular implementation in Python of the model can be seen below. For the full details, please refer to the project code link in the <a href="#appendix">Appendix</a>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>

<span class="c1"># Neural Network Model
</span><span class="k">class</span> <span class="nc">DampedPendulumModel</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">layers_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="n">units</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">tanh</span><span class="sh">'</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">output_layer</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="n">units</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">inputs</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">inputs</span>
        <span class="k">for</span> <span class="n">layer</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">layers_list</span><span class="p">:</span>
            <span class="n">x</span> <span class="o">=</span> <span class="nf">layer</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">output_layer</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="c1"># Vanilla Loss Function
</span><span class="k">def</span> <span class="nf">compute_vanilla_loss</span><span class="p">(</span><span class="n">predictions</span><span class="p">,</span> <span class="n">actual_theta</span><span class="p">,</span> <span class="n">actual_omega</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">tf</span><span class="p">.</span><span class="nf">reduce_mean</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="nf">square</span><span class="p">(</span><span class="n">predictions</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">actual_theta</span><span class="p">)</span> 

                          <span class="o">+</span> <span class="n">tf</span><span class="p">.</span><span class="nf">square</span><span class="p">(</span><span class="n">predictions</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">actual_omega</span><span class="p">))</span>

<span class="c1"># Vanilla NN Training Function
</span><span class="k">def</span> <span class="nf">train_vanilla</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">,</span> <span class="n">t_data</span><span class="p">,</span> <span class="n">theta_data</span><span class="p">,</span> <span class="n">omega_data</span><span class="p">,</span> <span class="n">epochs</span><span class="p">):</span>
    <span class="n">train_loss_record</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">plot_filenames</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">epochs</span><span class="p">):</span>
        <span class="k">with</span> <span class="n">tf</span><span class="p">.</span><span class="nc">GradientTape</span><span class="p">()</span> <span class="k">as</span> <span class="n">tape</span><span class="p">:</span>
            <span class="n">predictions</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="nf">constant</span><span class="p">(</span><span class="n">t_data</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">float32</span><span class="p">))</span>
            <span class="n">loss</span> <span class="o">=</span> <span class="nf">compute_vanilla_loss</span><span class="p">(</span><span class="n">predictions</span><span class="p">,</span> <span class="n">theta_data</span><span class="p">,</span> <span class="n">omega_data</span><span class="p">)</span>
        <span class="n">grads</span> <span class="o">=</span> <span class="n">tape</span><span class="p">.</span><span class="nf">gradient</span><span class="p">(</span><span class="n">loss</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">trainable_variables</span><span class="p">)</span>
        <span class="n">optimizer</span><span class="p">.</span><span class="nf">apply_gradients</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">grads</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">trainable_variables</span><span class="p">))</span>
        <span class="n">train_loss_record</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">loss</span><span class="p">.</span><span class="nf">numpy</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">train_loss_record</span><span class="p">,</span> <span class="n">plot_filenames</span>
</code></pre></div></div> <p>Note that the <code class="language-plaintext highlighter-rouge">GradientTape</code> method in <code class="language-plaintext highlighter-rouge">tensorflow</code> is used to record operations that would later be differentiated with the <code class="language-plaintext highlighter-rouge">gradient</code> method. This is TensorFlow’s approach to allowing the implementation of custom loss functions by users in Python.</p> <h3 id="the-physics-informed-neural-network">The Physics-Informed Neural Network</h3> <p>Physics-Informed Neural Networks (PINNs), despite their novelty, are well known for their useful properties in the study and solution of differential equations.<d-cite key="RAISSI2019686"></d-cite> By design, PINNs are guided by their physics-informed loss functions in the learning process, which makes them immune to all the issues related to having to train them on data, especially real-world data. Another aspect of PINNs, which is shared with Neural Networks in general, is that of the stark train-predict computing effort split. In other words, a researcher or an organization, might invest upfront into training a PINN to solve a complicated differential equation that would otherwise take days to solve with a regular numerical solver, in order to gain the benefit of almost instantaneous prediction. Such applications would be invaluable for predicting real-time hypersonic rocket positions, meteorological forecasts or the behaviors of financial derivatives, which are modelled by PDEs.</p> <p>The particular PINN that was chosen to learn and predict the behavior of the pendulum IVP, consists of a feed-forward neural network with the same specifications as the one presented in the previous sub-section, and a custom-designed physics-informed loss function which guides its training. The loss function consists of two parts. The first part is the loss contributed from the differential equation which is given as</p> \[\operatorname{Loss}_{\mathrm{GE}}=\operatorname{MSE}\left(\frac{d \hat{\theta}}{d t}-\widehat{\omega}, 0\right)+\operatorname{MSE}\left(\frac{d \widehat{\omega}}{d t}+b \cdot \widehat{\omega}+\left(\frac{g}{L}\right) \cdot \sin (\hat{\theta}), 0\right)\] <p>where \(\frac{d \hat{\theta}}{d t}\) and \(\frac{d \widehat{\omega}}{d t}\) are the gradients of the predicted \(\theta\) and \(\omega\) and are obtained via automatic differentiation. The second part of the loss function measures the loss contributed from the initial conditions of the IVP, namely \(\theta(0)\) and \(\omega\), and is given as</p> \[\operatorname{Loss}_{\mathrm{IC}}=\operatorname{MSE}\left(\hat{\theta}_0, \theta_0\right)+\operatorname{MSE}\left(\widehat{\omega}_0, \theta_0\right)\] <p>Then, the total loss is then the sum of the two parts and is given as</p> \[\operatorname{Loss}_{\mathrm{TOTAL}}=\operatorname{Loss}_{\mathrm{GE}}+\operatorname{Loss}_{\mathrm{IC}}\] <p>Below is a diagram of the architecture of the PINN.</p> <div class="row mt-3 l-page"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/PINN_architecture_transparent-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/PINN_architecture_transparent-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/PINN_architecture_transparent-1400.webp"/> <img src="/assets/img/NN_Final_Project/PINN_architecture_transparent.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> PINN Architecture. Diagram credit: <a href="https://github.com/parvanovkp/Neural_Networks_Final_Project/blob/main/PINN_architecture_transparent.png">Kal Parvanov/GitHub</a> </div> <p>Here is a specific Python implementation of this architecture with <code class="language-plaintext highlighter-rouge">tensorflow</code>. Please refer to the <a href="#appendix">Appendix</a> for a link to the entire code.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>

<span class="c1"># Neural Network Model
</span><span class="k">class</span> <span class="nc">DampedPendulumModel</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">layers_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="n">units</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">tanh</span><span class="sh">'</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">output_layer</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="n">units</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">inputs</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">inputs</span>
        <span class="k">for</span> <span class="n">layer</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">layers_list</span><span class="p">:</span>
            <span class="n">x</span> <span class="o">=</span> <span class="nf">layer</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">output_layer</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="c1"># Physics-Informed Loss Function
</span><span class="k">def</span> <span class="nf">compute_loss</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">t_data</span><span class="p">,</span> <span class="n">y0</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">tf</span><span class="p">.</span><span class="nc">GradientTape</span><span class="p">(</span><span class="n">persistent</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="k">as</span> <span class="n">tape</span><span class="p">:</span>
        <span class="n">tape</span><span class="p">.</span><span class="nf">watch</span><span class="p">(</span><span class="n">t_data</span><span class="p">)</span>
        <span class="n">predictions</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="n">t_data</span><span class="p">)</span>
        <span class="n">theta</span><span class="p">,</span> <span class="n">omega</span> <span class="o">=</span> <span class="n">predictions</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">],</span> <span class="n">predictions</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>

    <span class="c1"># Compute gradients outside the context of the tape
</span>    <span class="n">dtheta_dt</span> <span class="o">=</span> <span class="n">tape</span><span class="p">.</span><span class="nf">gradient</span><span class="p">(</span><span class="n">theta</span><span class="p">,</span> <span class="n">t_data</span><span class="p">,</span> <span class="n">unconnected_gradients</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">UnconnectedGradients</span><span class="p">.</span><span class="n">ZERO</span><span class="p">)</span>
    <span class="n">domega_dt</span> <span class="o">=</span> <span class="n">tape</span><span class="p">.</span><span class="nf">gradient</span><span class="p">(</span><span class="n">omega</span><span class="p">,</span> <span class="n">t_data</span><span class="p">,</span> <span class="n">unconnected_gradients</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">UnconnectedGradients</span><span class="p">.</span><span class="n">ZERO</span><span class="p">)</span>
    <span class="k">del</span> <span class="n">tape</span>  <span class="c1"># Delete the persistent tape after gradients are computed
</span>
    <span class="c1"># Damped pendulum equation
</span>    <span class="n">damped_eq</span> <span class="o">=</span> <span class="n">domega_dt</span> <span class="o">+</span> <span class="n">b</span> <span class="o">*</span> <span class="n">omega</span> <span class="o">+</span> <span class="p">(</span><span class="n">g</span> <span class="o">/</span> <span class="n">L</span><span class="p">)</span> <span class="o">*</span> <span class="n">tf</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">theta</span><span class="p">)</span>

    <span class="c1"># Loss for ODE and initial conditions
</span>    <span class="n">ode_loss</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">reduce_mean</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="nf">square</span><span class="p">(</span><span class="n">dtheta_dt</span> <span class="o">-</span> <span class="n">omega</span><span class="p">)</span> <span class="o">+</span> <span class="n">tf</span><span class="p">.</span><span class="nf">square</span><span class="p">(</span><span class="n">damped_eq</span><span class="p">))</span>
    <span class="n">ic_loss</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">reduce_mean</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="nf">square</span><span class="p">(</span><span class="n">predictions</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">y0</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">ode_loss</span> <span class="o">+</span> <span class="n">ic_loss</span>

<span class="c1"># Training Function
</span><span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">,</span> <span class="n">t_data</span><span class="p">,</span> <span class="n">y0</span><span class="p">,</span> <span class="n">epochs</span><span class="p">,</span> <span class="n">t_eval</span><span class="p">):</span>
    <span class="n">loss_history</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">epochs</span><span class="p">):</span>
        <span class="k">with</span> <span class="n">tf</span><span class="p">.</span><span class="nc">GradientTape</span><span class="p">()</span> <span class="k">as</span> <span class="n">tape</span><span class="p">:</span>
            <span class="n">loss</span> <span class="o">=</span> <span class="nf">compute_loss</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">t_data</span><span class="p">,</span> <span class="n">y0</span><span class="p">)</span>
        <span class="n">grads</span> <span class="o">=</span> <span class="n">tape</span><span class="p">.</span><span class="nf">gradient</span><span class="p">(</span><span class="n">loss</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">trainable_variables</span><span class="p">)</span>
        <span class="n">optimizer</span><span class="p">.</span><span class="nf">apply_gradients</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">grads</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">trainable_variables</span><span class="p">))</span>
        <span class="n">loss_history</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">loss</span><span class="p">.</span><span class="nf">numpy</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">loss_history</span>
</code></pre></div></div> <p>Note that, just like it was for the VNN, the physics informed loss function is incorporated into the model within the <code class="language-plaintext highlighter-rouge">train</code> function, where the <code class="language-plaintext highlighter-rouge">GradientTape</code> method is used for the loss function’s integration within the TensorFlow back-propagation framework.</p> <hr/> <h2 id="results-model-outcomes-and-insights">Results: Model Outcomes and Insights</h2> <p>This section covers the results of the two models and concludes with a comparison. The first objective is to train the VNN model on \(\theta\) and \(\omega\) data from the time interval \([0,10]\) and demonstrate its ability to accurately approximate the true solutions \(\theta(t)\) and \(\omega(t)\) on that interval. Note that since Neural Networks are by nature universal approximators, training the VNN on the data from the interval \([0,10]\) will allow it to learn the behavior of the dynamical system entirely.<d-cite key="HORNIK1991251"></d-cite> This is why the concept of using test data to evaluate the performance of the model, especially within the same time interval the neural network was trained on, is not applicable. The second goal is to train the PINN model on the interval \([0,20]\) and demonstrate its ability to solve the IVP on the interval \([0,10]\). Please note that since the PINN model does not use any \(\theta\) and \(\omega\) data during its training, training it on the interval \([0,20]\) still allows for a fair comparison to the VNN model. Finally, in the comparison section the two models are compared via their ability to predict the solution of the IVP on the interval \([0,20]\) in order to demonstrate the superior architecture of the PINN model and its suitability for dynamical systems problems such as the damped unforced pendulum problem.</p> <h3 id="vnn">VNN</h3> <p>The Vanilla Neural Network model was trained for 30001 epochs on 250 equispaced IVP solution points<d-footnote>For both $\theta$ and $\omega$.</d-footnote> on the interval \([0,10]\), obtained through the numerical solver. Below is a dynamic visualization of the training process that demonstrates neural networks’ ability to accurately approximate \(\theta(t)\) and \(\omega(t)\) in sufficiently many epochs.<d-footnote>Note that due to the nature of the model's reliance on training data there is some overfitting, which can be observed in the gif visualization below as a flickering deviations in the predicted solution throughout the epochs.</d-footnote></p> <div class="row mt-3 l-page"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/training_progress_VNN.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/training_progress_VNN.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/training_progress_VNN.gif-1400.webp"/> <img src="/assets/img/NN_Final_Project/training_progress_VNN.gif" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Visualization of the VNN learning process. GIF credit: <a href="https://github.com/parvanovkp/Neural_Networks_Final_Project/blob/main/Pendulum%20Project/Vanilla_NN_Pendulum_Project/training_progress_VNN.gif">Kal Parvanov/GitHub</a> </div> <p>The final training epoch resulted in a model that closely approximates the true solution of the IVP on the interval \([0,10]\).</p> <div class="row mt-3 l-page"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/vnn_plot_epoch_30001-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/vnn_plot_epoch_30001-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/vnn_plot_epoch_30001-1400.webp"/> <img src="/assets/img/NN_Final_Project/vnn_plot_epoch_30001.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Trained VNN model vs the true solution. Image credit: <a href="https://github.com/parvanovkp/Neural_Networks_Final_Project/blob/main/Pendulum%20Project/Vanilla_NN_Pendulum_Project/plot_epoch_30001.png">Kal Parvanov/GitHub</a> </div> <p>The associated training loss throughout the epochs can be seen in the following log base 10 loss plot.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/Vanilla_Model_Loss_History-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/Vanilla_Model_Loss_History-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/Vanilla_Model_Loss_History-1400.webp"/> <img src="/assets/img/NN_Final_Project/Vanilla_Model_Loss_History.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Log 10 plot of the training loss throughout the 30001 epochs. Image credit: <a href="https://github.com/parvanovkp/Neural_Networks_Final_Project/blob/main/Pendulum%20Project/Vanilla_NN_Pendulum_Project/Vanilla_Model_Loss_History.png">Kal Parvanov/GitHub</a> </div> <h3 id="pinn">PINN</h3> <p>The Physics-Informed Neural Network model was trained for 30001 epochs on 500 points from the interval \([0,20]\). Below is a dynamic visalization of the training process that demonstrates neural networks’ ability to accurately approximate \(\theta(t)\) and \(\omega(t)\) in sufficiently many epochs.<d-footnote>Note that due to the model's sole reliance on its loss function and the longer time interval for training the process of learning the true solution $\theta(t), \omega(t)$ on the interval $[0,20]$ is slower than that for the VNN model.</d-footnote></p> <div class="row mt-3 l-page"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/training_progress.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/training_progress.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/training_progress.gif-1400.webp"/> <img src="/assets/img/NN_Final_Project/training_progress.gif" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Visualization of the PINN learning process. GIF credit: <a href="https://github.com/parvanovkp/Neural_Networks_Final_Project/blob/main/Pendulum%20Project/PINN_Pendulum_Project/training_progress.gif">Kal Parvanov/GitHub</a> </div> <p>The final training epoch resulted in a model that produces a good approximation of the actual solution, which, however, is not sufficiently good for engineering purposes. For a better approximation of the quality of the VNN approximation more training epochs are needed.</p> <div class="row mt-3 l-page"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/pinn_prediction_30001-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/pinn_prediction_30001-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/pinn_prediction_30001-1400.webp"/> <img src="/assets/img/NN_Final_Project/pinn_prediction_30001.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Trained PINN model vs the true solution. Image credit: <a href="https://github.com/parvanovkp/Neural_Networks_Final_Project/blob/main/Pendulum%20Project/PINN_Pendulum_Project/training_plots/prediction_30001.png">Kal Parvanov/GitHub</a> </div> <p>The associated training loss throughout the epochs can be seen in the following log base 10 loss plot.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/model_loss_history_pinn-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/model_loss_history_pinn-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/model_loss_history_pinn-1400.webp"/> <img src="/assets/img/NN_Final_Project/model_loss_history_pinn.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Log 10 plot of the training loss throughout the 30001 epochs. Image credit: <a href="https://github.com/parvanovkp/Neural_Networks_Final_Project/blob/main/Pendulum%20Project/PINN_Pendulum_Project/model_loss_history.png">Kal Parvanov/GitHub</a> </div> <p>As we can see from the Log 10 plot of the loss throughout the epochs for the PINN model, there is less overfitting as evidenced by the lower jumps in loss at higher epochs. This suggests that the PINN model is a more stable approach for solving the IVP. The reliance on a physics-informed loss function helps mitigate the overfitting issues arising from the underlying structure of ANNs.</p> <h3 id="comparison-of-results">Comparison of Results</h3> <p>The VNN and PINN models are two very different approaches to solving the the pendulum IVP. While the Vanilla Neural Network model takes a traditional data-dependent deep learning approach, the Physics-Informed Neural Network uses an entirely novel approach that combines some of the best aspects of the worlds of numerical solvers and deep learning. The non-reliance on training data of the PINN allows it to focus on more accurately learning the underlying dynamics of the problem through its physics-informed loss function. This results in a model that not only requires no-data to train, but also has the ability to almost instantenously predict on the entire interval of training without the need for interpolation. To demonstrate this visually the VNN and PINN models were used to predict the IVP solution on the interval \([0,20]\).</p> <div class="row mt-3 l-screen"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/prediction_outside_training-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/prediction_outside_training-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/prediction_outside_training-1400.webp"/> <img src="/assets/img/NN_Final_Project/prediction_outside_training.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> VNN prediction on the interval [0,20]. Image credit: <a href="https://github.com/parvanovkp/Neural_Networks_Final_Project/blob/main/Pendulum%20Project/Vanilla_NN_Pendulum_Project/prediction_outside_training.png">Kal Parvanov/GitHub</a> </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/pinn_prediction_outside_training-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/pinn_prediction_outside_training-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/pinn_prediction_outside_training-1400.webp"/> <img src="/assets/img/NN_Final_Project/pinn_prediction_outside_training.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> PINN prediction on the interval [0,20]. Image credit: <a href="https://github.com/parvanovkp/Neural_Networks_Final_Project/blob/main/Pendulum%20Project/PINN_Pendulum_Project/pinn_prediction_outside_training.png">Kal Parvanov/GitHub</a> </div> </div> </div> <p>As can be seen from the plots above the Vanilla Neural Network accurately approximates the true solution on its interval of training, but it fails to predict the solution outside of the interval \([0,10]\). This, of course, is to be expected and is an excellent example of typical Neural Networks reliance on training data for making predictions. This over-reliance on data could often mislead or downright prevent engineers and researchers from gaining valuable insights about the problem, especially if the training data is tainted for some reason. The Physics-Informed Neural Network on the other hand demonstrates its ability to learn the IVP solution outside the original interval of interest, without the need to use any training data. This opens the door for a lot of applications of PINNs for solving differential equations that were previously thought unachievable by Neural Networks. With sufficient training one can use a PINN to solve complex differential equations almost instantaneously and to a great degree of accuracy. Below is a dynamic visualization of the training process of a PINN over 150001 epochs on the pendulum IVP.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/training_progress_DDE_PINN.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/training_progress_DDE_PINN.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/training_progress_DDE_PINN.gif-1400.webp"/> <img src="/assets/img/NN_Final_Project/training_progress_DDE_PINN.gif" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Visualization of the PINN learning process over 150001 epochs. GIF credit: <a href="https://github.com/parvanovkp/Neural_Networks_Final_Project/blob/main/Pendulum%20Project/DDE_PINN/training_progress_DDE_PINN.gif">Kal Parvanov/GitHub</a> </div> <h3 id="neural-networks-as-interpolators">Neural Networks as Interpolators</h3> <p>An interesting aspect of both the PINN and VNN models, which is also shared by all ANNs<d-footnote>Artificial Neural Networks.</d-footnote>, is their ability to approximate functions.<d-cite key="HORNIK1991251"></d-cite> The log 10 error plots for the difference between the true (numerical solver) and predicted theta for the VNN and PINN tell a very interesting story.<d-footnote>Note that the same phenomenon can be seen in the log 10 error plots for $\omega$ which have been omitted for brevity.</d-footnote></p> <div class="row mt-3 l-page"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/log_error_theta_vnn-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/log_error_theta_vnn-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/log_error_theta_vnn-1400.webp"/> <img src="/assets/img/NN_Final_Project/log_error_theta_vnn.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Log 10 error plot for VNN on the interval [0,20]. Image credit: <a href="https://github.com/parvanovkp/Neural_Networks_Final_Project/blob/main/Pendulum%20Project/Vanilla_NN_Pendulum_Project/log_error_theta.png">Kal Parvanov/GitHub</a> </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/log_error_theta-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/log_error_theta-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/log_error_theta-1400.webp"/> <img src="/assets/img/NN_Final_Project/log_error_theta.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Log 10 error plot for PINN on the interval [0,20]. Image credit: <a href="https://github.com/parvanovkp/Neural_Networks_Final_Project/blob/main/Pendulum%20Project/PINN_Pendulum_Project/log_error_theta.png">Kal Parvanov/GitHub</a> </div> </div> </div> <p>The log error plots above exhibit an interesting arching pattern<d-footnote> On the interval $[0,10]$ for the VNN and on the interval $[0,20]$ for the PINN</d-footnote>, which a person with an introductory numerical analysis background might recognize as <a href="https://en.wikipedia.org/wiki/Runge%27s_phenomenon">Runge’s phenomenon</a> which is a particular type of arch-like oscillation that occurs when using polynomial interpolation with polynomials of high degree over a set of equispaced interpolation points. From here follows that we can improve our results for both models by using time values (\(t\)) that are selected as the zeros of the \(n\)-th <a href="https://en.wikipedia.org/wiki/Chebyshev_nodes">Chebyshev polynomial</a>. This a classical approach in the field of Numerical Analysis and has a solid theoretical background that has established its usefulness.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/2560px-Chebyshev_Zeros.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/2560px-Chebyshev_Zeros.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/2560px-Chebyshev_Zeros.svg-1400.webp"/> <img src="/assets/img/NN_Final_Project/2560px-Chebyshev_Zeros.svg.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A plot of the zeros of the first 50 Chebyshev polynomials of the first kind. Image credit: <a href="https://commons.wikimedia.org/wiki/File:Chebyshev_Zeros.svg">Glosser.ca/Wikipedia</a> </div> <p>Finally, the observance of the Runge phenomenon suggests that Neural Networks can be thought of as interpolators instead of as approximators as the training loss approaches 0. Here is a <a href="https://gowrishankar.info/blog/deep-learning-is-not-as-impressive-as-you-think-its-mere-interpolation/">link</a> to the summary of a very interesting and thought provoking discussion between Prof. Yann LeCun and colleagues on Twitter from 2021.</p> <hr/> <h2 id="conclusion-broader-implications-and-future-research-directions">Conclusion: Broader Implications and Future Research Directions</h2> <p>The pendulum problem, once a simple concept in classical mechanics, has evolved into a complex subject integral to contemporary engineering and science. Its journey began in the 17th century with Christiaan Huygens using it for timekeeping. This historical application laid the groundwork for further scientific breakthroughs, including Earth’s rotational proof and Galileo’s discoveries. In modern times, the pendulum transcends its initial purpose, playing a crucial role in seismology and structural engineering. Its principles, particularly in vibration control, are vital in designing earthquake-resistant structures. This evolution from a rudimentary timekeeping device to a key component in sophisticated systems highlights the pendulum’s significance. It exemplifies how basic mechanical concepts can be applied to solve complex, real-world problems. The story of the pendulum is a testament to the adaptability and enduring relevance of fundamental scientific principles.</p> <p>Advancements in dynamical systems theory have led to a deeper understanding of the pendulum in realistic scenarios. Traditional models, previously simplistic, now incorporate external forces like air resistance and friction. These more complex models reveal intricate behaviors, including transitions to chaotic motions under certain conditions. This richer understanding has highlighted the limitations of conventional analytical methods, especially in predicting dynamic behaviors accurately. The need for advanced analytical approaches has become increasingly apparent. These approaches must capture the nuanced dynamics of systems like the pendulum. The challenge lies in accurately modeling systems that exhibit both regular and irregular behaviors. This advancement in understanding dynamical systems marks a significant evolution in scientific analysis and modeling.</p> <div class="row mt-3 l-gutter"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/Double_pendulum_predicting_dynamics.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/Double_pendulum_predicting_dynamics.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/Double_pendulum_predicting_dynamics.gif-1400.webp"/> <img src="/assets/img/NN_Final_Project/Double_pendulum_predicting_dynamics.gif" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption l-gutter" style="margin-top: -125px;"> A chaotic double pendulum dynamical system. GIF credit: <a href="https://commons.wikimedia.org/wiki/File:Double_pendulum_predicting_dynamics.gif">Jacopo Bertolotti/Wikipedia</a> </div> <p>The emergence of numerical analysis has addressed the limitations of traditional methods in handling complex systems. In fields where precision and computational efficiency are paramount, such as aerospace engineering and high-rise building design, these methods are essential. The development of these techniques has been driven by the need for faster, more accurate solutions. These new methods aim to provide deeper insights into complex systems at reduced computational costs. The shift towards more efficient modeling techniques represents a significant change in computational analysis. It signals a new era in understanding and predicting the behavior of dynamic systems. The growing complexity of these systems necessitates a continual evolution of analytical methods. This evolution is crucial for keeping pace with the increasing sophistication of engineering and scientific applications.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/Chaos_Theory_&amp;_Double_Pendulum_-_3-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/Chaos_Theory_&amp;_Double_Pendulum_-_3-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/Chaos_Theory_&amp;_Double_Pendulum_-_3-1400.webp"/> <img src="/assets/img/NN_Final_Project/Chaos_Theory_&amp;_Double_Pendulum_-_3.jpg" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> The butterfly effect in a chaotic double pendulum dynamical system. Image credit: <a href="https://commons.wikimedia.org/wiki/File:Chaos_Theory_%26_Double_Pendulum_-_3.jpg">Christian V./Wikipedia</a> </div> <p>The introduction of Neural Networks, especially the Physics-Informed Neural Network (PINN), has revolutionized the field. The Vanilla Neural Network (VNN) serves as a foundational model, leveraging function approximation capabilities. In contrast, the PINN introduces an innovative approach by integrating physics principles directly into the network. This allows the PINN to efficiently solve complex differential equations without extensive data reliance. These networks, particularly the PINN, have redefined predictive modeling in dynamics. They have opened new avenues for understanding and analyzing dynamic systems. The unique features of these networks demonstrate a significant advancement in the field. They highlight the potential for new, data-independent approaches to modeling dynamic systems with neural networks.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NN_Final_Project/Lorenz_attractor.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NN_Final_Project/Lorenz_attractor.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NN_Final_Project/Lorenz_attractor.gif-1400.webp"/> <img src="/assets/img/NN_Final_Project/Lorenz_attractor.gif" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> "A streamline, seen as a flow of particles from the same initial point, in a Lorenz system." GIF credit: <a href="https://commons.wikimedia.org/wiki/File:Lorenz_attractor.gif">Thierry Dugnolle/Wikipedia</a> </div> <p>Looking forward, Operator Learning and methods like DeepONet represent the next frontier in dynamical system analysis. Building on the foundation laid by PINNs, these techniques hold great promise for solving complex differential equations.<d-cite key="lu2021"></d-cite> They aim to capture the underlying operators governing system dynamics, offering more precise and adaptable solutions. This represents not just a technical advancement but a paradigm shift in how dynamic systems are approached. The potential applications of these methods are vast and varied. They could lead to breakthroughs in fields ranging from environmental science to financial modeling. The integration of these advanced techniques will further enhance our ability to understand and predict complex physical phenomena. This progression signifies a major leap in scientific problem-solving and modeling capabilities.</p> <h2 id="appendix">Appendix</h2> <p><strong>Image Credits:</strong> Thumbnail GIF by <a href="https://commons.wikimedia.org/wiki/File:Anchor_escapement_animation_217x328px.gif">Chetvorno/Wikipedia</a></p> <p><strong>Project Code:</strong> <a href="https://github.com/parvanovkp/Neural_Networks_Final_Project/tree/main/Pendulum%20Project">Kal Parvanov/Github</a></p>]]></content><author><name>Kal Parvanov</name></author><category term="neural networks"/><category term="neural networks"/><category term="differential equations"/><summary type="html"><![CDATA[Applying physics-informed neural networks to ODEs]]></summary></entry></feed>